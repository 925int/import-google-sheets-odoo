import os
import pandas as pd
import psycopg2
import csv
import sys
from psycopg2.extras import execute_values

# üîπ Augmenter la limite de lecture des lignes CSV
csv.field_size_limit(sys.maxsize)

# üîπ Chemin du dossier o√π le fichier est upload√©
UPLOAD_FOLDER = '/var/www/webroot/ROOT/uploads/'

# üîπ Connexion √† PostgreSQL
POSTGRES_HOST = "node172643-env-8840643.jcloud.ik-server.com"
POSTGRES_DB = "alex_odoo"
POSTGRES_USER = "Odoo"
POSTGRES_PASSWORD = "C:2&#:4G9pAO823O@3iC"

def get_db_connection():
    return psycopg2.connect(
        host=POSTGRES_HOST,
        database=POSTGRES_DB,
        user=POSTGRES_USER,
        password=POSTGRES_PASSWORD
    )

def process_uploaded_file():
    csv_file = os.path.join(UPLOAD_FOLDER, "Derendinger - PF-9208336.csv")
    if not os.path.exists(csv_file):
        return f"‚ùå Fichier non trouv√© : {csv_file}"
    return process_csv(csv_file)

def process_csv(csv_file):
    try:
        print("üì• Chargement du fichier CSV avec correction d'encodage et s√©parateur...")
        df_iterator = pd.read_csv(csv_file, delimiter=',', encoding='utf-8', quoting=csv.QUOTE_MINIMAL, on_bad_lines='skip', dtype=str, chunksize=10000)
        df = pd.concat(df_iterator, ignore_index=True)
        df.columns = df.columns.str.strip()  # Normaliser les noms de colonnes

        # Supprimer les lignes o√π "Artikelbezeichnung in FR" est vide
        df = df[df["Artikelbezeichnung in FR"].notna() & df["Artikelbezeichnung in FR"].str.strip().ne("")]

        # V√©rification du nombre de lignes charg√©es
        print(f"üîç Nombre de lignes charg√©es dans df: {len(df)}")

        # Convertir les prix en float en rempla√ßant les virgules par des points
        df["UVP exkl. MwSt."] = df["UVP exkl. MwSt."].astype(str).str.replace(',', '.').astype(float)
        df["Nettopreis exkl. MwSt."] = df["Nettopreis exkl. MwSt."].astype(str).str.replace(',', '.').astype(float)

        # Correction du format des codes EAN pour √©viter la notation scientifique
        df["EAN-Code"] = df["EAN-Code"].apply(lambda x: f"{int(float(x))}" if isinstance(x, str) and x.replace('.', '', 1).isdigit() else x)

        # Nettoyage des espaces dans "Artikel-Nr."
        df["Artikel-Nr."] = df["Artikel-Nr."].str.replace(" ", "")

        # Cr√©ation de la colonne "Fournisseurs / ID externe" avec pr√©fixe "drd."
        df["Fournisseurs / ID externe"] = "drd." + df["Artikel-Nr."]

        # Remplacement des valeurs "9208336" par "Derendinger AG" dans "Kunden-Nr"
        df["Kunden-Nr"] = df["Kunden-Nr"].replace("9208336", "Derendinger AG")
        
        # Renommer "Kunden-Nr" en "Fournisseurs / Fournisseur" et "Artikel-Nr." en "Fournisseurs / Code du produit du fournisseur"
        df.rename(columns={
            "Kunden-Nr": "Fournisseurs / Fournisseur",
            "Artikel-Nr.": "Fournisseurs / Code du produit du fournisseur"
        }, inplace=True)
    except Exception as e:
        return f"‚ùå Erreur lors du chargement du fichier CSV : {str(e)}"
    
    expected_columns = [
        "Fournisseurs / Fournisseur", "Fournisseurs / Code du produit du fournisseur", "Herstellerartikelnummer", "Artikelbezeichnung in FR",
        "UVP exkl. MwSt.", "Nettopreis exkl. MwSt.", "Brand", "EAN-Code", "Fournisseurs / ID externe"
    ]
    found_columns = df.columns.tolist()
    
    if not all(col in found_columns for col in expected_columns):
        missing_columns = [col for col in expected_columns if col not in found_columns]
        extra_columns = [col for col in found_columns if col not in expected_columns]
        print("‚ùå Colonnes attendues mais manquantes :", missing_columns)
        print("‚ö†Ô∏è Colonnes trouv√©es en trop :", extra_columns)
        return "‚ùå Le fichier CSV ne contient pas toutes les colonnes attendues. V√©rifiez les noms et formats."
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS produits (
            id SERIAL PRIMARY KEY,
            fournisseur VARCHAR(255),
            code_produit_fournisseur VARCHAR(255),
            id_externe VARCHAR(255),
            herstellerartikelnummer VARCHAR(255),
            artikelbezeichnung_fr VARCHAR(255),
            uvp_exkl_mwst NUMERIC(10,2),
            nettopreis_exkl_mwst NUMERIC(10,2),
            brand VARCHAR(255),
            ean_code VARCHAR(255)
        )
    """)
    conn.commit()
    
    data_to_insert = [
        (
            row.get("Fournisseurs / Fournisseur", "") or "",
            row.get("Fournisseurs / Code du produit du fournisseur", "") or "",
            row.get("Fournisseurs / ID externe", "") or "",
            row.get("Herstellerartikelnummer", "") or "",
            row.get("Artikelbezeichnung in FR", "") or "",
            float(row.get("UVP exkl. MwSt.", "0")) if row.get("UVP exkl. MwSt.") else 0,
            float(row.get("Nettopreis exkl. MwSt.", "0")) if row.get("Nettopreis exkl. MwSt.") else 0,
            row.get("Brand", "") or "",
            row.get("EAN-Code", "") or ""
        )
        for _, row in df.iterrows()
    ]
    
    print(f"üîç Exemple de donn√©es √† ins√©rer: {data_to_insert[:5]}")
    
    insert_query = """
        INSERT INTO produits (fournisseur, code_produit_fournisseur, id_externe, herstellerartikelnummer, artikelbezeichnung_fr, 
                              uvp_exkl_mwst, nettopreis_exkl_mwst, brand, ean_code) 
        VALUES %s
    """
    execute_values(cursor, insert_query, data_to_insert)
    conn.commit()
    
    cursor.close()
    conn.close()
    
    return f"‚úÖ {len(data_to_insert)} produits ins√©r√©s dans PostgreSQL."

if __name__ == '__main__':
    print("üìÇ V√©rification des fichiers upload√©s...")
    print(process_uploaded_file())
